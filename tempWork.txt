
  useEffect(() => {
    if (chatId) {
      // Join the chat room when component mounts
      socket.emit(JOIN_CHAT, chatId);

      // Listen for new messages
      socket.on(NEW_MESSAGE, (data) => {
        console.log('New message received:', data);
        setMessageForRealTime((prevMessages) => [...prevMessages, data]);   
      });

      // Clean up function
      return () => {
        // Leave the chat room when component unmounts
        socket.emit(LEAVE_CHAT, chatId);
        socket.off(NEW_MESSAGE);
      };
    }
  }, [socket, chatId]);


  server.js code for room based approach

  import next from "next";
import { createServer } from "node:http";
import { Server } from "socket.io";
import { v4 as uuid } from "uuid";
import { NEW_MESSAGE, JOIN_CHAT, LEAVE_CHAT } from "./constants/events.js";
import { Message } from "./models/message.js";
import { connectToDB } from "./utils/connectToDB.js";
import cookieParser from "cookie-parser";
import { socketAuthenticator } from "./middlewares/socketAuth.js";

const dev = process.env.NODE_ENV !== "production";
const hostname = "localhost";
const port = 3000;

const app = next({ dev, hostname, port });
const handler = app.getRequestHandler();

export const userSocketIDs = new Map();

app.prepare().then(() => {
  const httpServer = createServer(handler);

  const io = new Server(httpServer);

  connectToDB();
  io.use((socket, next) => {
    cookieParser()(socket.request, socket.request.res, async (err) => {
      await socketAuthenticator(err, socket, next);
    });
  });

  io.on("connection", (socket) => {
    console.log("User connected", socket.id);
    const user = socket.user;
    userSocketIDs.set(user.id.toString(), socket.id);

    socket.on(JOIN_CHAT, (chatId) => {
      socket.join(chatId);
      console.log(`User ${user.id} joined chat ${chatId}`);
    });

    socket.on(LEAVE_CHAT, (chatId) => {
      socket.leave(chatId);
      console.log(`User ${user.id} left chat ${chatId}`);
    });

    socket.on(NEW_MESSAGE, async ({ chatId, message }) => {
      console.log("Received new message:", { chatId, message });
      const messageForRealTime = {
        content: message,
        _id: uuid(),
        sender: {
          _id: user.id,
          name: user.name,
        },
        chat: chatId,
        createdAt: new Date().toISOString(),
      };
      const messageForDB = {
        content: message,
        sender: user.id,
        chat: chatId,
      };

      // Emit the message to the specific chat room
      io.to(chatId).emit(NEW_MESSAGE, {
        chatId,
        messageForRealTime,
      });

      try {
        await Message.create(messageForDB);
      } catch (error) {
        console.log(error.message);
      }
    });

    socket.on("disconnect", () => {
      console.log("User disconnected", socket.id);
      userSocketIDs.delete(user.id.toString());
      // You might want to leave all rooms here, but Socket.IO does this automatically
    });
  });

  httpServer
    .once("error", (err) => {
      console.error(err);
      process.exit(1);
    })
    .listen(port, () => {
      console.log(`> Ready on http://${hostname}:${port}`);
    });
});


to do work 

message seen feature


maybe i will add profile button in small devices

add chatGpt and Gemini chat list in that chat app
also the chats in the chatgpt and in the gemini will be deleted after 15 days for managing the space in the database it is written in the top in small text that the chat will be completely deleted after 15 days
